- hosts: dns_servers
  become: true
  gather_facts: false
  tasks:

  - name: Add hosts to OSEv3 group
    add_host: 
        name: '{{ inventory_hostname }}'
        groups: OSEv3
    loop: "{{ groups['dns_servers'] }}"


  - set_fact:
        pub_ip: "{{ ansible_host }}"
        priv_ip: "{{ openshift_ip }}"

  - name: Configuring DNS server(s) on management host(s)
    block:
    - name: Install Bind (DNS)
      yum: name=bind state=present
      tags:
      - bind-config

    - name: Configure /etc/named.conf
      copy:
          dest: /etc/named.conf
          content: |
              options {
              	listen-on port 53 { 127.0.0.1; {{ priv_ip }}; };
              	//listen-on-v6 port 53 { ::1; };
              	directory 	"/var/named";
              	dump-file 	"/var/named/data/cache_dump.db";
              	statistics-file "/var/named/data/named_stats.txt";
              	memstatistics-file "/var/named/data/named_mem_stats.txt";
              	allow-query     { localhost; 0.0.0.0/0; };
                  check-names master ignore;
                  check-names slave ignore;
                  check-names response ignore;
              	recursion yes;
                forward first;
                # forwarders { 10.189.136.37; 10.189.136.165; };
                forwarders { 10.189.132.52; };
              	dnssec-enable yes;
              	dnssec-validation yes;
              	bindkeys-file "/etc/named.iscdlv.key";
              	managed-keys-directory "/var/named/dynamic";
              	pid-file "/run/named/named.pid";
              	session-keyfile "/run/named/session.key";
              };
              logging {
                      channel default_debug {
                              file "data/named.run";
                              severity dynamic;
                      };
              };
              zone "." IN {
              	type hint;
              	file "named.ca";
              };
              include "/etc/named.rfc1912.zones";
              include "/etc/named.root.key";
              include "myzones.conf";
          owner: root
          group: named
          mode: '0640'
      notify:
      - restart_named
      tags:
      - bind-config
  
    - name: Setting some temporary facts
      set_fact:
        rev_zone_net: "{{ priv_ip.split('.')[::-1][1:] | join('.') }}"
      tags:
      - bind-config
  
    - name: Create zones file
      copy:
          dest: /var/named/myzones.conf
          content: |
              zone "{{ rev_zone_net }}.in-addr.arpa." IN {
                  type master;
                  file "{{ rev_zone_net }}.in-addr.arpa.zone";
                  allow-update { none; };
              };
              
              zone "{{ private_domain }}" IN {
                  type master;
                  file "{{ private_domain }}.zone";
                  allow-update { none; };
              };
          owner: root
          group: named
          mode: '0640'
      notify:
      - restart_named
      tags:
      - bind-config
  
 
    - name: Create a direct zone ({{ private_domain }})
      copy:
          dest: /var/named/{{ private_domain }}.zone
          content: |
              $TTL 86400
              $ORIGIN {{ private_domain }}.
              @       IN      SOA     ns.{{ private_domain }}. root.{{ private_domain }}. (
                          01        ; Serial
                          3h        ; Refresh
                          1h        ; Retry
                          1w        ; Expiry
                          3h        ; TTL
                          )
              
              	IN	NS	ns.{{ private_domain }}.
              	IN	A	{{ priv_ip }}
              ns	IN	A	{{ priv_ip }}

              *.{{ openshift_master_default_subdomain }}. 300  IN A  {{ openshift_master_cluster_public_ip }}

              {% for h in groups['masters'] %}
              {{ hostvars[h].openshift_hostname }}. 300  IN A  {{ hostvars[h].openshift_ip }}
              {% endfor %}

              {% for h in groups['infra'] %}
              {{ hostvars[h].openshift_hostname }}.  IN A  {{ hostvars[h].openshift_ip }}
              {% endfor %} 

              {% for h in groups['app'] %}
              {{ hostvars[h].openshift_hostname }}.  IN A  {{ hostvars[h].openshift_ip }}
              {% endfor %} 

              {% for h in groups['glusterfs'] %}
              {{ hostvars[h].openshift_hostname }}.  IN A  {{ hostvars[h].openshift_ip }}
              {% endfor %} 

              {{ openshift_master_cluster_hostname }}.  IN A  {{ openshift_master_cluter_ip }}


          owner: root
          group: named
          mode: '0644'
      notify:
      - restart_named
      tags:
      - bind-config

    - debug: var=openshift_master_cluster_public_hostname
  
    - name: Create a reverse zone ({{ rev_zone_net }})
      copy:
          dest: "/var/named/{{ rev_zone_net }}.in-addr.arpa.zone"
          content: |
              $TTL 86400
              $ORIGIN {{ rev_zone_net }}.in-addr.arpa.
              @       IN      SOA     ns.{{ private_domain }}. root.{{ private_domain }}. (
                          01        ; Serial
                          3h        ; Refresh
                          1h        ; Retry
                          1w        ; Expiry
                          3h        ; TTL
                          )
              
              	IN	NS	ns.{{ private_domain }}.
              	IN	A	{{ priv_ip }}

              {{ openshift_master_cluster_public_ip.split('.')[-1] }}  PTR  *.{{ openshift_master_default_subdomain }}.

              {% for h in groups['masters'] %}
              {{ hostvars[h].openshift_ip.split('.')[-1] }}  PTR  {{ hostvars[h].openshift_hostname }}.
              {% endfor %}

              {% for h in groups['infra'] %}
              {{ hostvars[h].openshift_ip.split('.')[-1] }}  PTR  {{ hostvars[h].openshift_hostname }}.
              {% endfor %} 

              {% for h in groups['app'] %}
              {{ hostvars[h].openshift_ip.split('.')[-1] }}  PTR  {{ hostvars[h].openshift_hostname }}.
              {% endfor %} 

              {% for h in groups['glusterfs'] %}
              {{ hostvars[h].openshift_ip.split('.')[-1] }}  PTR  {{ hostvars[h].openshift_hostname }}. 
              {% endfor %} 

              {{ openshift_master_cluter_ip.split('.')[-1] }}  PTR  {{ openshift_master_cluster_hostname }}. 


          owner: root
          group: named
          mode: '0644'
      notify:
      - restart_named
      tags:
      - bind-config

    - name: Enabled Bind
      service: name=named state=started enabled=on
    when: inventory_hostname in groups['dns_servers']

  handlers:
    - name: restart_named
      service: name=named state=restarted enabled=on


- hosts:
    - masters
    - nodes
    - infra
    - glusterfs
    - glusterfs_registry
    - etcd
    - app
    - bastion
  become: yes
  gather_facts: yes
  tasks:

#  - name: Remove unneeded DNS entries in /etc/*/ifcfg-eth0
#    lineinfile:
#        path: /etc/sysconfig/network-scripts/ifcfg-eth0
#        regexp: '^DNS.*$'
#        state: absent

  - name: Get ip addresses of DNS (management server(s))
    set_fact:
        dns_ips: '{{ groups["dns_servers"] | map("extract", hostvars, "openshift_ip") | list }}'
    tags:
    - dns

  - debug: var=dns_ips
    tags:
    - dns

  - name: Add a needed line in /etc/sysconfig/network-scripts/ifcfg-eth0
    lineinfile:
        path: /etc/sysconfig/network-scripts/ifcfg-eth0
        regexp: '^PEERDNS.*$'
        line: 'PEERDNS=no'
        state: present
    notify:
    - reload_network

  - name: Updating dns clients's dns settings
    lineinfile:
        path: /etc/sysconfig/network-scripts/ifcfg-eth0
        regexp: '^DNS{{ id+1 }}=.*$'
        line: 'DNS{{ id+1 }}={{ item }}'
    loop: '{{ dns_ips }}'
    loop_control: 
        index_var: id
    notify:
        - reload_network

  - name: Updating /etc/resolv.conf
    copy:
        content: |
            search novalocal {{ private_domain }}
            {% for d in dns_ips %}
            nameserver {{ d }}
            {% endfor %}
        dest: /etc/resolv.conf
  handlers:
  - name: reload_network
    set_fact: one=1
#    service: name=network state=reloaded

