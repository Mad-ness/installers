heat_template_version: 2018-03-02
description: A template for creating storage nodes

parameters:
    image:
        type: string
        label: Image name or ID
        description: Image used to create an instance from
    flavor:
        type: string
        label: Flavor
        description: Flavor to set a proper set of resources
    key_name:
        type: string
        label: Key name
        description: Name of key-pair to be installed on a created server

    public_network:
        type: string
        label: The public network
        description: Public network that is used for external connections
    private_network:
        type: string
        label: Private network
        description: Private network that is used for OpenShift internal communications

    storage_network:
        type: string
        label: Storage Network
        description: Storage Network to access Storage

    port1_allowed_tcp_ports:
        type: comma_delimited_list
        label: Allowed TCP ports
        description: Allowed TCP ports that is being accessing on a storage port1
        default: "22,2049"
    port1_allowed_udp_ports:
        type: comma_delimited_list
        label: Allowed UDP ports
        description: Allowed UDP ports that is being accessing on a storage port1
        default: "111"

    storage_volume_size:
        type: number
        label: Size of a single volume
        default: 100
        description: Specify size (GB) of a single volume

    volume_type:
        type: string
        label: Ceph Storage volume type
        description: Volume Type CephStorage
        default: CephStorage
    scheduler_hints:
        type: string
        label: Scheduler Hints
        description: Schedule hints that is being applied

    user_data:
        type: string
        label: Software configuration
        description: Put there a script that is being executing upon a server gets up
        default: ""

resources:


    sg_port1_tcpports:
        type: OS::Neutron::SecurityGroup
        properties:
            description: Rules to access the only allowed traffic on a storage port1 by TCP ports
            rules:
                repeat:
                    for_each:
                        <%port%>: { get_param: port1_allowed_tcp_ports }
                    template:
                        direction: ingress
                        ethertype: IPv4
                        port_range_min: <%port%>
                        port_range_max: <%port%>
                        protocol: tcp
                        remote_ip_prefix: 0.0.0.0/0

    sg_port1_udpports:
        type: OS::Neutron::SecurityGroup
        properties:
            description: Rules to access the only allowed traffic on a storage port1 by UDP ports
            rules:
                repeat:
                    for_each:
                        <%port%>: { get_param: port1_allowed_udp_ports }
                    template:
                        direction: ingress
                        ethertype: IPv4
                        port_range_min: <%port%>
                        port_range_max: <%port%>
                        protocol: udp
                        remote_ip_prefix: 0.0.0.0/0

    sg_port1_icmpports:
        type: OS::Neutron::SecurityGroup
        properties:
            description: Rules to access the only allowed traffic on a storage port1 by ICMP ports
            rules:
              - direction: ingress
                ethertype: IPv4
                protocol: icmp
                remote_ip_prefix: 0.0.0.0/0

    sg_port2_allports:
        type: OS::Neutron::SecurityGroup
        properties:
            rules:
              - direction: ingress
                ethertype: IPv4
                protocol: tcp
                remote_ip_prefix: 0.0.0.0/0
              - direction: ingress
                ethertype: IPv4
                protocol: udp
                remote_ip_prefix: 0.0.0.0/0
              - direction: ingress
                ethertype: IPv4
                protocol: icmp
                remote_ip_prefix: 0.0.0.0/0

    sg_port3_allports:
        type: OS::Neutron::SecurityGroup
        properties:
            rules:
              - direction: ingress
                ethertype: IPv4
                protocol: tcp
                remote_ip_prefix: 0.0.0.0/0
              - direction: ingress
                ethertype: IPv4
                protocol: udp
                remote_ip_prefix: 0.0.0.0/0
              - direction: ingress
                ethertype: IPv4
                protocol: icmp
                remote_ip_prefix: 0.0.0.0/0

### Port-1 - Management Network
### Port-2 - API Network
### Port-3 - Storage Network
    storage1_port1:
        type: OS::Neutron::Port
        properties:
            network_id: { get_param: public_network }
            security_groups:
              - { get_resource: sg_port1_tcpports }
              - { get_resource: sg_port1_udpports }
              - { get_resource: sg_port1_icmpports }
    storage1_port2:
        type: OS::Neutron::Port
        properties:
            network_id: { get_param: private_network }
            security_groups:
              - { get_resource: sg_port2_allports }
    storage1_port3:
        type: OS::Neutron::Port
        properties:
            network_id: { get_param: storage_network }
            security_groups:
              - { get_resource: sg_port3_allports }


    storage2_port1:
        type: OS::Neutron::Port
        properties:
            network_id: { get_param: public_network }
            security_groups:
              - { get_resource: sg_port1_tcpports }
              - { get_resource: sg_port1_udpports }
              - { get_resource: sg_port1_icmpports }
    storage2_port2:
        type: OS::Neutron::Port
        properties:
            network_id: { get_param: private_network }
            security_groups:
              - { get_resource: sg_port2_allports }
    storage2_port3:
        type: OS::Neutron::Port
        properties:
            network_id: { get_param: storage_network }
            security_groups:
              - { get_resource: sg_port3_allports }



    storage3_port1:
        type: OS::Neutron::Port
        properties:
            network_id: { get_param: public_network }
            security_groups:
              - { get_resource: sg_port1_tcpports }
              - { get_resource: sg_port1_udpports }
              - { get_resource: sg_port1_icmpports }
    storage3_port2:
        type: OS::Neutron::Port
        properties:
            network_id: { get_param: private_network }
            security_groups:
              - { get_resource: sg_port2_allports }
    storage3_port3:
        type: OS::Neutron::Port
        properties:
            network_id: { get_param: storage_network }
            security_groups:
              - { get_resource: sg_port3_allports }




    storagenode1_vol1: { type: "OS::Cinder::Volume", properties: { size: { get_param: storage_volume_size }, volume_type: { get_param: volume_type }}}
    storagenode1_vol2: { type: "OS::Cinder::Volume", properties: { size: { get_param: storage_volume_size }, volume_type: { get_param: volume_type }}}
    storagenode1_vol3: { type: "OS::Cinder::Volume", properties: { size: { get_param: storage_volume_size }, volume_type: { get_param: volume_type }}}

    storagenode2_vol1: { type: "OS::Cinder::Volume", properties: { size: { get_param: storage_volume_size }, volume_type: { get_param: volume_type }}}
    storagenode2_vol2: { type: "OS::Cinder::Volume", properties: { size: { get_param: storage_volume_size }, volume_type: { get_param: volume_type }}}
    storagenode2_vol3: { type: "OS::Cinder::Volume", properties: { size: { get_param: storage_volume_size }, volume_type: { get_param: volume_type }}}

    storagenode3_vol1: { type: "OS::Cinder::Volume", properties: { size: { get_param: storage_volume_size }, volume_type: { get_param: volume_type }}}
    storagenode3_vol2: { type: "OS::Cinder::Volume", properties: { size: { get_param: storage_volume_size }, volume_type: { get_param: volume_type }}}
    storagenode3_vol3: { type: "OS::Cinder::Volume", properties: { size: { get_param: storage_volume_size }, volume_type: { get_param: volume_type }}}


    storagenode1_vol1_att: { type: "OS::Cinder::VolumeAttachment", properties: { volume_id: { get_resource: storagenode1_vol1 }, instance_uuid: { get_resource: storage1 }}}
    storagenode1_vol2_att: { type: "OS::Cinder::VolumeAttachment", properties: { volume_id: { get_resource: storagenode1_vol2 }, instance_uuid: { get_resource: storage1 }}}
    storagenode1_vol3_att: { type: "OS::Cinder::VolumeAttachment", properties: { volume_id: { get_resource: storagenode1_vol3 }, instance_uuid: { get_resource: storage1 }}}

    storagenode2_vol1_att: { type: "OS::Cinder::VolumeAttachment", properties: { volume_id: { get_resource: storagenode2_vol1 }, instance_uuid: { get_resource: storage2 }}}
    storagenode2_vol2_att: { type: "OS::Cinder::VolumeAttachment", properties: { volume_id: { get_resource: storagenode2_vol2 }, instance_uuid: { get_resource: storage2 }}}
    storagenode2_vol3_att: { type: "OS::Cinder::VolumeAttachment", properties: { volume_id: { get_resource: storagenode2_vol3 }, instance_uuid: { get_resource: storage2 }}}

    storagenode3_vol1_att: { type: "OS::Cinder::VolumeAttachment", properties: { volume_id: { get_resource: storagenode3_vol1 }, instance_uuid: { get_resource: storage3 }}}
    storagenode3_vol2_att: { type: "OS::Cinder::VolumeAttachment", properties: { volume_id: { get_resource: storagenode3_vol2 }, instance_uuid: { get_resource: storage3 }}}
    storagenode3_vol3_att: { type: "OS::Cinder::VolumeAttachment", properties: { volume_id: { get_resource: storagenode3_vol3 }, instance_uuid: { get_resource: storage3 }}}




    storage1:
        type: OS::Nova::Server
        properties:
            image: { get_param: image }
            flavor: { get_param: flavor }
            key_name: { get_param: key_name }
            networks: [ port: { get_resource: storage1_port1 }, port: { get_resource: storage1_port2 }, port: { get_resource: storage1_port3 }]
            user_data: { get_param: user_data }
            scheduler_hints: { group: { get_param: scheduler_hints }}

    storage2:
        type: OS::Nova::Server
        properties:
            image: { get_param: image }
            flavor: { get_param: flavor }
            key_name: { get_param: key_name }
            networks: [ port: { get_resource: storage2_port1 }, port: { get_resource: storage2_port2 }, port: { get_resource: storage2_port3 }]
            user_data: { get_param: user_data }
            scheduler_hints: { group: { get_param: scheduler_hints }}

    storage3:
        type: OS::Nova::Server
        properties:
            image: { get_param: image }
            flavor: { get_param: flavor }
            key_name: { get_param: key_name }
            networks: [ port: { get_resource: storage3_port1 }, port: { get_resource: storage3_port2 }, port: { get_resource: storage3_port3 }]
            user_data: { get_param: user_data }
            scheduler_hints: { group: { get_param: scheduler_hints }}

outputs:
#    storage_subnet_cidr:
#        description: CIDR of Storage Backend Network
#        value: { get_attr: [ storage_subnet, cidr ]}

    storage1_ip1:
        description: Storage1 Public IP address
        value: { get_attr: [ storage1_port1, fixed_ips, 0, ip_address ]}
    storage1_ip2:
        description: Storage1 Private IP address
        value: { get_attr: [ storage1_port2, fixed_ips, 0, ip_address ]}
    storage1_ip3:
        description: Storage1 Private IP address
        value: { get_attr: [ storage1_port3, fixed_ips, 0, ip_address ]}

    storage2_ip1:
        description: Storage2 Public IP address
        value: { get_attr: [ storage2_port1, fixed_ips, 0, ip_address ]}
    storage2_ip2:
        description: Storage2 Private IP address
        value: { get_attr: [ storage2_port2, fixed_ips, 0, ip_address ]}
    storage2_ip3:
        description: Storage1 Private IP address
        value: { get_attr: [ storage2_port3, fixed_ips, 0, ip_address ]}

    storage3_ip1:
        description: Storage3 Public IP address
        value: { get_attr: [ storage3_port1, fixed_ips, 0, ip_address ]}
    storage3_ip2:
        description: Storage3 Private IP address
        value: { get_attr: [ storage3_port2, fixed_ips, 0, ip_address ]}
    storage3_ip3:
        description: Storage1 Private IP address
        value: { get_attr: [ storage3_port3, fixed_ips, 0, ip_address ]}
