heat_template_version: 2018-03-02
description: A template for creating application nodes

parameters:
    image:
        type: string
        label: Image name or ID
        description: Image used to create an instance from
    flavor:
        type: string
        label: Flavor
        description: Flavor to set a proper set of resources
    key_name:
        type: string
        label: Key name
        description: Name of key-pair to be installed on a created server
    public_network:
        type: string
        label: The public network
        description: Public network that is used for external connections
    private_network:
        type: string
        label: Private network
        description: Private network that is used for OpenShift internal communications
    port1_allowed_tcp_ports:
        type: comma_delimited_list
        label: Allowed TCP ports
        description: Allowed TCP ports that is being accessing on a infra port1
        default: "22,2049"
    port1_allowed_udp_ports:
        type: comma_delimited_list
        label: Allowed UDP ports
        description: Allowed UDP ports that is being accessing on a infra port1
        default: "111"
    cluster_vip_allowed_tcp_ports:
        type: comma_delimited_list
        label: Allowed TCP ports
        description: Allowed TCP ports that is being accessing on a infra port1
        default: "22,2049"
    cluster_vip_allowed_udp_ports:
        type: comma_delimited_list
        label: Allowed UDP ports
        description: Allowed UDP ports that is being accessing on a infra port1
        default: "111"
 
    user_data: 
        type: string
        label: Software configuration
        description: Put there a script that is being executing upon a server gets up
        default: ""

resources:

    sg_cluster_int_vip_allports:
        type: OS::Neutron::SecurityGroup
        properties:
            name: ocp3_sg_cluster_int_vip
            rules: 
              - direction: ingress
                ethertype: IPv4
                protocol: tcp
                remote_ip_prefix: 0.0.0.0/0
              - direction: ingress
                ethertype: IPv4
                protocol: udp
                remote_ip_prefix: 0.0.0.0/0
              - direction: ingress
                ethertype: IPv4
                protocol: icmp
                remote_ip_prefix: 0.0.0.0/0


    sg_port2_allports:
        type: OS::Neutron::SecurityGroup
        properties:
            name: ocp3_sg_internal_network
            rules:
              - direction: ingress
                ethertype: IPv4
                protocol: tcp
                remote_ip_prefix: 0.0.0.0/0
              - direction: ingress
                ethertype: IPv4
                protocol: udp
                remote_ip_prefix: 0.0.0.0/0
              - direction: ingress
                ethertype: IPv4
                protocol: icmp
                remote_ip_prefix: 0.0.0.0/0



    sg_cluster_pub_vip_tcpports:
        type: OS::Neutron::SecurityGroup
        properties:
            name: ocp3_sg_infras_cluster_pub_vip_tcpports
            rules:
                repeat:
                    for_each:
                        <%port%>: { get_param: cluster_vip_allowed_tcp_ports }
                    template:
                        direction: ingress
                        ethertype: IPv4
                        port_range_min: <%port%>
                        port_range_max: <%port%>
                        protocol: tcp
                        remote_ip_prefix: 0.0.0.0/0

    sg_cluster_pub_vip_udpports:
        type: OS::Neutron::SecurityGroup
        properties:
            name: ocp3_sg_infras_cluster_pub_vip_udpports 
            description: Rules to access the only allowed traffic on a infra port1 by UDP ports
            rules:
                repeat:
                    for_each:
                        <%port%>: { get_param: cluster_vip_allowed_udp_ports }
                    template:
                        direction: ingress
                        ethertype: IPv4
                        port_range_min: <%port%>
                        port_range_max: <%port%>
                        protocol: udp
                        remote_ip_prefix: 0.0.0.0/0



    sg_port1_tcpports:
        type: OS::Neutron::SecurityGroup
        properties:
            name: ocp3_sg_infras_port1_tcpports
            description: Rules to access the only allowed traffic on a infra port1 by TCP ports
            rules:
                repeat:
                    for_each:
                        <%port%>: { get_param: port1_allowed_tcp_ports }
                    template:
                        direction: ingress
                        ethertype: IPv4
                        port_range_min: <%port%>
                        port_range_max: <%port%>
                        protocol: tcp
                        remote_ip_prefix: 0.0.0.0/0

    sg_port1_udpports:
        type: OS::Neutron::SecurityGroup
        properties:
            name: ocp3_sg_infras_port1_udpports
            description: Rules to access the only allowed traffic on a infra port1 by UDP ports
            rules:
                repeat:
                    for_each:
                        <%port%>: { get_param: port1_allowed_udp_ports }
                    template:
                        direction: ingress
                        ethertype: IPv4
                        port_range_min: <%port%>
                        port_range_max: <%port%>
                        protocol: udp
                        remote_ip_prefix: 0.0.0.0/0

    sg_port1_icmpports:
        type: OS::Neutron::SecurityGroup
        properties:
            name: ocp3_sg_infras_port1_icmpports
            description: Rules to access the only allowed traffic on a infra port1 by ICMP ports
            rules:
              - direction: ingress
                ethertype: IPv4
                protocol: icmp
                remote_ip_prefix: 0.0.0.0/0


    cluster_vip_port1:
        type: OS::Neutron::Port
        properties:
            network_id: { get_param: public_network }
            security_groups:
              - { get_resource: sg_port1_tcpports }
              - { get_resource: sg_port1_udpports }
              - { get_resource: sg_port1_icmpports }
    cluster_vip_port2:
        type: OS::Neutron::Port
        properties:
            network_id: { get_param: private_network }
            security_groups:
              - { get_resource: sg_cluster_int_vip_allports }





    infra1_port1:
        type: OS::Neutron::Port
        properties:
            network_id: { get_param: public_network }
            security_groups:
              - { get_resource: sg_port1_tcpports }
              - { get_resource: sg_port1_udpports }
              - { get_resource: sg_port1_icmpports }
            allowed_address_pairs:
              - ip_address: { get_attr: [ cluster_vip_port1, fixed_ips, 0, ip_address ]}
    infra1_port2:
        type: OS::Neutron::Port
        properties:
            network_id: { get_param: private_network }
            security_groups:
              - { get_resource: sg_port2_allports }
            allowed_address_pairs:
              - ip_address: { get_attr: [ cluster_vip_port2, fixed_ips, 0, ip_address ]}
 
    infra2_port1:
        type: OS::Neutron::Port
        properties:
            network_id: { get_param: public_network }
            security_groups:
              - { get_resource: sg_port1_tcpports }
              - { get_resource: sg_port1_udpports }
              - { get_resource: sg_port1_icmpports }
            allowed_address_pairs:
              - ip_address: { get_attr: [ cluster_vip_port1, fixed_ips, 0, ip_address ]}
    infra2_port2:
        type: OS::Neutron::Port
        properties:
            network_id: { get_param: private_network }
            security_groups:
              - { get_resource: sg_port2_allports }
            allowed_address_pairs:
              - ip_address: { get_attr: [ cluster_vip_port2, fixed_ips, 0, ip_address ]}
 

    infra3_port1:
        type: OS::Neutron::Port
        properties:
            network_id: { get_param: public_network }
            security_groups:
              - { get_resource: sg_port1_tcpports }
              - { get_resource: sg_port1_udpports }
              - { get_resource: sg_port1_icmpports }
            allowed_address_pairs:
              - ip_address: { get_attr: [ cluster_vip_port1, fixed_ips, 0, ip_address ]}
    infra3_port2:
        type: OS::Neutron::Port
        properties:
            network_id: { get_param: private_network }
            security_groups:
              - { get_resource: sg_port2_allports }
            allowed_address_pairs:
              - ip_address: { get_attr: [ cluster_vip_port2, fixed_ips, 0, ip_address ]}
 


    infra1:
        type: OS::Nova::Server
        properties:
            name: ocp3_infra1
            image: { get_param: image }
            flavor: { get_param: flavor }
            key_name: { get_param: key_name }
            networks: [ port: { get_resource: infra1_port1 }, port: { get_resource: infra1_port2 }]
            user_data: { get_param: user_data }

    infra2:
        type: OS::Nova::Server
        properties:
            name: ocp3_infra2
            image: { get_param: image }
            flavor: { get_param: flavor }
            key_name: { get_param: key_name }
            networks: [ port: { get_resource: infra2_port1 }, port: { get_resource: infra2_port2 }]
            user_data: { get_param: user_data }

    infra3:
        type: OS::Nova::Server
        properties:
            name: ocp3_infra3
            image: { get_param: image }
            flavor: { get_param: flavor }
            key_name: { get_param: key_name }
            networks: [ port: { get_resource: infra3_port1 }, port: { get_resource: infra3_port2 }]
            user_data: { get_param: user_data }


outputs:

    cluster_ip1:
        description: AppNode1 IP address
        value: { get_attr: [ cluster_vip_port1, fixed_ips, 0 ]}
    cluster_ip2:
        description: AppNode1 IP address
        value: { get_attr: [ cluster_vip_port2, fixed_ips, 0 ]}


    infra1_ip1:
        description: Infra1 Public IP address
        value: { get_attr: [ infra1_port1, fixed_ips, 0 ]}
    infra1_ip2:
        description: Infra1 Private IP address
        value: { get_attr: [ infra1_port2, fixed_ips, 0 ]}

    infra2_ip1:
        description: Infra2 Public IP address
        value: { get_attr: [ infra2_port1, fixed_ips, 0 ]}
    infra2_ip2:
        description: Infra2 Private IP address
        value: { get_attr: [ infra2_port2, fixed_ips, 0 ]}

    infra3_ip1:
        description: Infra3 Public IP address
        value: { get_attr: [ infra3_port1, fixed_ips, 0 ]}
    infra3_ip2:
        description: Infra3 Private IP address
        value: { get_attr: [ infra3_port2, fixed_ips, 0 ]}

